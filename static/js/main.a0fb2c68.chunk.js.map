{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleData","event","target","name","setState","person_name","value","state","handleSubmit","e","preventDefault","isValid","Object","keys","length","forEach","n","trim","alert","JSON","stringify","className","style","textAlignVertical","textAlign","this","flexiConfig","items","map","form_field","type","label","onChange","placeholder","values","team","key","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRA8EeA,E,kDA1Eb,WAAYC,GAAO,IAAD,8BACZ,cAAMA,IAOZC,WAAa,SAACC,GACa,gBAAtBA,EAAMC,OAAOC,MACd,EAAKC,SAAS,CAACC,YAAaJ,EAAMC,OAAOI,QAElB,WAAtBL,EAAMC,OAAOC,MACb,EAAKC,SAAS,CAACG,MAAON,EAAMC,OAAOI,SAbtB,EAiBlBE,aAAe,SAACC,GACZA,EAAEC,iBACF,IAAIC,GAAU,EACwB,IAAnCC,OAAOC,KAAK,EAAKN,OAAOO,QAI3BF,OAAOC,KAAK,EAAKN,OAAOQ,SAAQ,SAAAC,GACxB,EAAKT,MAAMS,IAAgC,KAA1B,EAAKT,MAAMS,GAAGC,SACjCC,MAAMF,EAAI,oBACVL,GAAU,MAGbA,GACDO,MAAM,cAAeC,KAAKC,UAAU,EAAKb,SAVzCW,MAAO,6BAnBP,EAAKX,MAAQ,CACXF,YAAa,GACbE,MAAO,IAJG,E,qDAmCR,IAAD,OACP,OACG,yBAAKc,UAAU,WACd,0BAAMA,UAAU,eACX,wBAAIA,UAAU,sBAAsBC,MAAO,CAACC,kBAAmB,SAASC,UAAW,WAAnF,QACA,yBAAKH,UAAU,cAEVI,KAAK1B,MAAM2B,YAAYC,MAAMC,KAAI,SAAAC,GAC/B,OAAO,6BACgB,cAApBA,EAAWC,MACV,yBAAKT,UAAW,cACZ,2BAAOA,UAAU,iBAAiBQ,EAAWE,MAA7C,KACA,2BAAO5B,KAAM0B,EAAW1B,KAAM6B,SAAU,EAAKhC,WAAYqB,UAAU,eAAeY,YAAaJ,EAAWE,SAE5F,aAApBF,EAAWC,MACT,yBAAKT,UAAW,cACd,2BAAOA,UAAU,iBAAkBQ,EAAWE,MAA9C,KACA,4BAAQ5B,KAAM0B,EAAW1B,KAAMkB,UAAU,0BAA0BW,SAAU,EAAKhC,WAAYiC,YAAaJ,EAAWE,OACpH,wDACCF,EAAWK,OAAON,KAAI,SAACO,GAAD,OAAU,4BAAQC,IAAKD,GAAQA,aAOpE,yBAAKd,UAAU,cACb,4BAAQgB,QAASZ,KAAKjB,aAAca,UAAU,oCAA9C,mB,GAhEGiB,aCCbZ,G,MAAc,CAEpBC,MAAO,CAAC,CAEN,KAAQ,cAER,MAAS,gBAET,KAAQ,YAER,OAAS,IAEN,CAEH,KAAQ,SAER,MAAS,iBAET,KAAQ,WAER,OAAU,CAEK,cAEA,SAEA,kBA0BFY,E,kDAnBb,aAAe,IAAD,8BACZ,gBACKhC,MAAQ,CACXmB,YAAa,IAHH,E,qDASZ,OACE,6BAEE,kBAAC,EAAD,CAAMA,YAAaA,S,GAbTY,aCvBEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a0fb2c68.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nclass Form extends Component {\r\n\r\n  constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          person_name: '',\r\n          state: ''\r\n        }\r\n  }\r\n\r\n  handleData = (event) => {\r\n    if(event.target.name === 'person_name'){\r\n      this.setState({person_name: event.target.value})\r\n    }\r\n    if(event.target.name === 'states'){\r\n       this.setState({state: event.target.value})\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      let isValid = true;\r\n      if(Object.keys(this.state).length === 0) {\r\n        alert (\"All fields are required!\")\r\n        return;\r\n      }\r\n      Object.keys(this.state).forEach(n => {\r\n          if(!this.state[n] || this.state[n].trim()  === '') {\r\n            alert(n + ' cannot be empty');\r\n            isValid = false\r\n          }\r\n      });\r\n      if(isValid){\r\n        alert(\"Submitted: \"+ JSON.stringify(this.state));\r\n      }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n       <div className=\"wrapper\">\r\n        <form className=\"form-signin\"> \r\n             <h2 className=\"form-signin-heading\" style={{textAlignVertical: \"center\",textAlign: \"center\"}}>Form</h2>\r\n             <div className=\"form-group\"> \r\n                {\r\n                  this.props.flexiConfig.items.map(form_field => {\r\n                    return <div>\r\n                      {form_field.type === \"TextField\" && \r\n                        <div className =\"form-group\">\r\n                            <label className=\"control-label\">{form_field.label}:</label>\r\n                            <input name={form_field.name} onChange={this.handleData} className=\"form-control\" placeholder={form_field.label} /> \r\n                        </div>}\r\n                     {form_field.type === \"DropDown\" && \r\n                        <div className =\"form-group\">\r\n                          <label className=\"control-label\" >{form_field.label}:</label>\r\n                          <select name={form_field.name} className=\"small mb-1 form-control\" onChange={this.handleData} placeholder={form_field.label}>\r\n                            <option> -- Please Select --</option>\r\n                            {form_field.values.map((team) => <option key={team} >{team}</option>)}\r\n                                 </select>\r\n                        </div>}\r\n                    </div>\r\n                  })   \r\n                }     \r\n              </div>\r\n              <div className=\"form-group\"> \r\n                <button onClick={this.handleSubmit} className=\"btn btn-lg btn-primary btn-block\">Register</button>   \r\n              </div>  \r\n              \r\n        </form>\r\n      </div>)\r\n  }\r\n}\r\n\r\nForm.propTypes = {\r\n  flexiConfig: PropTypes.object\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\nimport Form from './Form';\nimport './App.css';\nconst flexiConfig = {\n\nitems: [{\n\n  \"name\": \"person_name\",\n\n  \"label\": \"Person's Name\",\n\n  \"type\": \"TextField\",\n\n  \"values\":\"\",\n\n  }, {\n\n  \"name\": \"states\",\n\n  \"label\": \"Person's state\",\n\n  \"type\": \"DropDown\",\n\n  \"values\": [\n\n                 \"Maharashtra\",\n\n                 \"Kerala\",\n\n                 \"Tamil Nadu\"\n\n  ]}\n]\n\n};\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      flexiConfig: ''\n    };\n  }\n \n\n  render() {\n    return (\n      <div>\n     \n        <Form flexiConfig={flexiConfig}/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport './asset/external.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}